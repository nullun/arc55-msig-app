#pragma version 10

// This TEAL was generated by TEALScript v0.80.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// onlySigner(): void
//
// Check the transaction sender is a signer for the multisig
onlySigner:
	proto 0 0

	// src/arcs/arc55.algo.ts:84
	// assert(this.arc55_addressCount(this.txn.sender).exists)
	txna Applications 0
	txn Sender
	app_global_get_ex
	swap
	pop
	assert
	retsub

// onlyAdmin(): void
//
// Check the transaction sender is the admin
onlyAdmin:
	proto 0 0

	// if0_condition
	// src/arcs/arc55.algo.ts:91
	// this.arc55_admin.exists
	txna Applications 0
	byte 0x61726335355f61646d696e // "arc55_admin"
	app_global_get_ex
	swap
	pop
	bz if0_else

	// if0_consequent
	// src/arcs/arc55.algo.ts:92
	// assert(this.txn.sender === this.arc55_admin.value)
	txn Sender
	byte 0x61726335355f61646d696e // "arc55_admin"
	app_global_get
	==
	assert
	b if0_end

if0_else:
	// src/arcs/arc55.algo.ts:94
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

if0_end:
	retsub

// isAdmin(): boolean
//
// Find out if the transaction sender is the admin
// @returns True if sender is admin
isAdmin:
	proto 0 1

	// if1_condition
	// src/arcs/arc55.algo.ts:103
	// this.arc55_admin.exists
	txna Applications 0
	byte 0x61726335355f61646d696e // "arc55_admin"
	app_global_get_ex
	swap
	pop
	bz if1_else

	// if1_consequent
	// src/arcs/arc55.algo.ts:104
	// return this.txn.sender === this.arc55_admin.value;
	txn Sender
	byte 0x61726335355f61646d696e // "arc55_admin"
	app_global_get
	==
	retsub
	b if1_end

if1_else:
	// src/arcs/arc55.algo.ts:106
	// return this.txn.sender === this.app.creator;
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	retsub

if1_end:
	retsub

// arc55_getThreshold()uint64
abi_route_arc55_getThreshold:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc55_getThreshold()uint64
	callsub arc55_getThreshold
	itob
	concat
	log
	int 1
	return

// arc55_getThreshold(): uint64
//
// Retrieve the signature threshold required for the multisignature to be submitted
// @returns Multisignature threshold
arc55_getThreshold:
	proto 0 1

	// src/arcs/arc55.algo.ts:118
	// return this.arc55_threshold.value;
	byte 0x61726335355f7468726573686f6c64 // "arc55_threshold"
	app_global_get
	retsub

// arc55_getAdmin()address
abi_route_arc55_getAdmin:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc55_getAdmin()address
	callsub arc55_getAdmin
	concat
	log
	int 1
	return

// arc55_getAdmin(): Address
//
// Retrieves the admin address, responsible for calling arc55_setup
// @returns Admin address
arc55_getAdmin:
	proto 0 1

	// src/arcs/arc55.algo.ts:127
	// return this.arc55_admin.value;
	byte 0x61726335355f61646d696e // "arc55_admin"
	app_global_get
	retsub

// arc55_nextTransactionGroup()uint64
abi_route_arc55_nextTransactionGroup:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc55_nextTransactionGroup()uint64
	callsub arc55_nextTransactionGroup
	itob
	concat
	log
	int 1
	return

// arc55_nextTransactionGroup(): uint64
//
//
// @returns Next expected Transaction Group nonce
arc55_nextTransactionGroup:
	proto 0 1

	// src/arcs/arc55.algo.ts:136
	// return this.arc55_nonce.value + 1;
	byte 0x61726335355f6e6f6e6365 // "arc55_nonce"
	app_global_get
	int 1
	+
	retsub

// arc55_getTransaction(uint64,uint8)byte[]
abi_route_arc55_getTransaction:
	// The ABI return prefix
	byte 0x151f7c75

	// transactionIndex: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	btoi

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_getTransaction(uint64,uint8)byte[]
	callsub arc55_getTransaction
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// arc55_getTransaction(transactionGroup: uint64, transactionIndex: uint8): bytes
//
// Retrieve a transaction from a given transaction group
// @param transactionGroup Transaction Group nonce
// @param transactionIndex Index of transaction within group
// @returns A single transaction at the specified index for the transaction group nonce
arc55_getTransaction:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/arcs/arc55.algo.ts:147
	// transactionBox: TransactionGroup = {
	//             nonce: transactionGroup,
	//             index: transactionIndex
	//         }
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // transactionIndex: uint8
	itob
	extract 7 1
	concat
	frame_bury 0 // transactionBox: TransactionGroup

	// src/arcs/arc55.algo.ts:152
	// return this.arc55_transactions(transactionBox).value;
	frame_dig 0 // transactionBox: TransactionGroup
	box_get
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// arc55_getSignatures(uint64,address)byte[64][]
abi_route_arc55_getSignatures:
	// The ABI return prefix
	byte 0x151f7c75

	// signer: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_getSignatures(uint64,address)byte[64][]
	callsub arc55_getSignatures
	dup
	len
	int 64
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// arc55_getSignatures(transactionGroup: uint64, signer: Address): bytes64[]
//
// Retrieve a list of signatures for a given transaction group nonce and address
// @param transactionGroup Transaction Group nonce
// @param signer Address you want to retrieve signatures for
// @returns Array of signatures
arc55_getSignatures:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/arcs/arc55.algo.ts:163
	// signatureBox: TransactionSignatures = {
	//             nonce: transactionGroup,
	//             address: signer
	//         }
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // signer: Address
	concat
	frame_bury 0 // signatureBox: TransactionSignatures

	// src/arcs/arc55.algo.ts:168
	// return this.arc55_signatures(signatureBox).value;
	frame_dig 0 // signatureBox: TransactionSignatures
	int 2
	int 0
	box_extract

	// set the subroutine return value
	frame_bury 0
	retsub

// arc55_getSignerByIndex(uint64)address
abi_route_arc55_getSignerByIndex:
	// The ABI return prefix
	byte 0x151f7c75

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_getSignerByIndex(uint64)address
	callsub arc55_getSignerByIndex
	concat
	log
	int 1
	return

// arc55_getSignerByIndex(index: uint64): Address
//
// Find out which address is at this index of the multisignature
// @param index Address at this index of the multisignature
// @returns Address at index
arc55_getSignerByIndex:
	proto 1 1

	// src/arcs/arc55.algo.ts:178
	// return this.arc55_indexToAddress(index).value;
	frame_dig -1 // index: uint64
	itob
	app_global_get
	retsub

// arc55_isSigner(address)bool
abi_route_arc55_isSigner:
	// The ABI return prefix
	byte 0x151f7c75

	// address: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc55_isSigner(address)bool
	callsub arc55_isSigner
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc55_isSigner(address: Address): boolean
//
// Check if an address is a member of the multisignature
// @param address Address to check is a signer
// @returns True if address is a signer
arc55_isSigner:
	proto 1 1

	// src/arcs/arc55.algo.ts:188
	// return this.arc55_addressCount(address).value !== 0;
	frame_dig -1 // address: Address
	app_global_get
	int 0
	!=
	retsub

// arc55_mbrSigIncrease(uint64)uint64
abi_route_arc55_mbrSigIncrease:
	// The ABI return prefix
	byte 0x151f7c75

	// signaturesSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_mbrSigIncrease(uint64)uint64
	callsub arc55_mbrSigIncrease
	itob
	concat
	log
	int 1
	return

// arc55_mbrSigIncrease(signaturesSize: uint64): uint64
//
// Calculate the minimum balance requirement for storing a signature
// @param signaturesSize Size (in bytes) of the signatures to store
// @returns Minimum balance requirement increase
arc55_mbrSigIncrease:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// src/arcs/arc55.algo.ts:198
	// currentBalance = this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_bury 0 // currentBalance: uint64

	// src/arcs/arc55.algo.ts:199
	// minimumBalance = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 1 // minimumBalance: uint64

	// src/arcs/arc55.algo.ts:204
	// mbrSigRequired = (2500) + (400 * (40 + 2 + signaturesSize))
	int 2500
	int 400
	int 42
	frame_dig -1 // signaturesSize: uint64
	+
	*
	+
	frame_bury 2 // mbrSigRequired: uint64

	// src/arcs/arc55.algo.ts:206
	// newMinimumBalance = minimumBalance + mbrSigRequired
	frame_dig 1 // minimumBalance: uint64
	frame_dig 2 // mbrSigRequired: uint64
	+
	frame_bury 3 // newMinimumBalance: uint64

	// if2_condition
	// src/arcs/arc55.algo.ts:207
	// currentBalance >= newMinimumBalance
	frame_dig 0 // currentBalance: uint64
	frame_dig 3 // newMinimumBalance: uint64
	>=
	bz if2_end

	// if2_consequent
	// src/arcs/arc55.algo.ts:208
	// return 0;
	int 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

if2_end:
	// src/arcs/arc55.algo.ts:211
	// return newMinimumBalance - currentBalance;
	frame_dig 3 // newMinimumBalance: uint64
	frame_dig 0 // currentBalance: uint64
	-

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// arc55_mbrTxnIncrease(uint64)uint64
abi_route_arc55_mbrTxnIncrease:
	// The ABI return prefix
	byte 0x151f7c75

	// transactionSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_mbrTxnIncrease(uint64)uint64
	callsub arc55_mbrTxnIncrease
	itob
	concat
	log
	int 1
	return

// arc55_mbrTxnIncrease(transactionSize: uint64): uint64
//
// Calculate the minimum balance requirement for storing a transaction
// @param transactionSize Size (in bytes) of the transaction to store
// @returns Minimum balance requirement increase
arc55_mbrTxnIncrease:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// src/arcs/arc55.algo.ts:221
	// currentBalance = this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_bury 0 // currentBalance: uint64

	// src/arcs/arc55.algo.ts:222
	// minimumBalance = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 1 // minimumBalance: uint64

	// src/arcs/arc55.algo.ts:227
	// mbrTxnRequired = (2500) + (400 * (9 + transactionSize))
	int 2500
	int 400
	int 9
	frame_dig -1 // transactionSize: uint64
	+
	*
	+
	frame_bury 2 // mbrTxnRequired: uint64

	// src/arcs/arc55.algo.ts:229
	// newMinimumBalance = minimumBalance + mbrTxnRequired
	frame_dig 1 // minimumBalance: uint64
	frame_dig 2 // mbrTxnRequired: uint64
	+
	frame_bury 3 // newMinimumBalance: uint64

	// if3_condition
	// src/arcs/arc55.algo.ts:230
	// currentBalance >= newMinimumBalance
	frame_dig 0 // currentBalance: uint64
	frame_dig 3 // newMinimumBalance: uint64
	>=
	bz if3_end

	// if3_consequent
	// src/arcs/arc55.algo.ts:231
	// return 0;
	int 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

if3_end:
	// src/arcs/arc55.algo.ts:234
	// return newMinimumBalance - currentBalance;
	frame_dig 3 // newMinimumBalance: uint64
	frame_dig 0 // currentBalance: uint64
	-

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// arc55_setAdmin(newAdmin: Address): void
//
// Set the admin address for the On-Chain Msig App
// @param newAdmin New admin address
arc55_setAdmin:
	proto 1 0

	// src/arcs/arc55.algo.ts:244
	// this.arc55_admin.value = newAdmin
	byte 0x61726335355f61646d696e // "arc55_admin"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// arc55_setup(uint8,address[])void
abi_route_arc55_setup:
	// addresses: address[]
	txna ApplicationArgs 2
	extract 2 0

	// threshold: uint8
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	btoi

	// execute arc55_setup(uint8,address[])void
	callsub arc55_setup
	int 1
	return

// arc55_setup(threshold: uint8, addresses: Address[]): void
//
// Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.
// @param threshold Initial multisig threshold, must be greater than 0
// @param addresses Array of addresses that make up the multisig
arc55_setup:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// src/arcs/arc55.algo.ts:258
	// assert(!this.arc55_nonce.value)
	byte 0x61726335355f6e6f6e6365 // "arc55_nonce"
	app_global_get
	!
	assert

	// src/arcs/arc55.algo.ts:259
	// this.onlyAdmin()
	callsub onlyAdmin

	// src/arcs/arc55.algo.ts:261
	// t: uint64 = btoi(rawBytes(threshold))
	frame_dig -1 // threshold: uint8
	itob
	extract 7 1
	btoi
	frame_bury 0 // t: uint64

	// src/arcs/arc55.algo.ts:262
	// assert(t)
	frame_dig 0 // t: uint64
	assert

	// src/arcs/arc55.algo.ts:263
	// this.arc55_threshold.value = t
	byte 0x61726335355f7468726573686f6c64 // "arc55_threshold"
	frame_dig 0 // t: uint64
	app_global_put

	// src/arcs/arc55.algo.ts:265
	// this.arc55_nonce.value = 0
	byte 0x61726335355f6e6f6e6365 // "arc55_nonce"
	int 0
	app_global_put

	// src/arcs/arc55.algo.ts:269
	// pIndex = 0
	int 0
	frame_bury 1 // pIndex: uint64

while_0:
	// src/arcs/arc55.algo.ts:270
	// this.arc55_indexToAddress(pIndex).exists
	txna Applications 0
	frame_dig 1 // pIndex: uint64
	itob
	app_global_get_ex
	swap
	pop
	bz while_0_end

	// src/arcs/arc55.algo.ts:271
	// address = this.arc55_indexToAddress(pIndex).value
	frame_dig 1 // pIndex: uint64
	itob
	app_global_get
	frame_bury 2 // address: address

	// src/arcs/arc55.algo.ts:275
	// this.arc55_addressCount(address).delete
	frame_dig 2 // address: address
	app_global_del

	// src/arcs/arc55.algo.ts:276
	// this.arc55_indexToAddress(pIndex).delete
	frame_dig 1 // pIndex: uint64
	itob
	app_global_del

	// src/arcs/arc55.algo.ts:277
	// pIndex += 1
	frame_dig 1 // pIndex: uint64
	int 1
	+
	frame_bury 1 // pIndex: uint64
	b while_0

while_0_end:
	// src/arcs/arc55.algo.ts:281
	// nIndex = 0
	int 0
	frame_bury 3 // nIndex: uint64

while_1:
	// src/arcs/arc55.algo.ts:283
	// nIndex < addresses.length
	frame_dig 3 // nIndex: uint64
	frame_dig -2 // addresses: Address[]
	len
	int 32
	/
	<
	bz while_1_end

	// src/arcs/arc55.algo.ts:284
	// address = addresses[nIndex]
	frame_dig -2 // addresses: Address[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 3 // nIndex: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_bury 4 // address: Address

	// src/arcs/arc55.algo.ts:287
	// this.arc55_indexToAddress(nIndex).value = address
	frame_dig 3 // nIndex: uint64
	itob
	frame_dig 4 // address: Address
	app_global_put

	// src/arcs/arc55.algo.ts:291
	// this.arc55_addressCount(address).value += 1
	frame_dig 4 // address: Address
	app_global_get
	int 1
	+
	frame_dig 4 // address: Address
	swap
	app_global_put

	// src/arcs/arc55.algo.ts:293
	// nIndex += 1
	frame_dig 3 // nIndex: uint64
	int 1
	+
	frame_bury 3 // nIndex: uint64
	b while_1

while_1_end:
	retsub

// arc55_newTransactionGroup()uint64
abi_route_arc55_newTransactionGroup:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc55_newTransactionGroup()uint64
	callsub arc55_newTransactionGroup
	itob
	concat
	log
	int 1
	return

// arc55_newTransactionGroup(): uint64
//
// Generate a new transaction group nonce for holding pending transactions
// @returns transactionGroup Transaction Group nonce
arc55_newTransactionGroup:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// if4_condition
	// src/arcs/arc55.algo.ts:302
	// !this.isAdmin()
	callsub isAdmin
	!
	bz if4_end

	// if4_consequent
	// src/arcs/arc55.algo.ts:303
	// this.onlySigner()
	callsub onlySigner

if4_end:
	// src/arcs/arc55.algo.ts:306
	// n = this.arc55_nextTransactionGroup()
	callsub arc55_nextTransactionGroup
	frame_bury 0 // n: uint64

	// src/arcs/arc55.algo.ts:307
	// this.arc55_nonce.value = n
	byte 0x61726335355f6e6f6e6365 // "arc55_nonce"
	frame_dig 0 // n: uint64
	app_global_put

	// src/arcs/arc55.algo.ts:309
	// return n;
	frame_dig 0 // n: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// arc55_addTransaction(pay,uint64,uint8,byte[])void
abi_route_arc55_addTransaction:
	// transaction: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// index: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	btoi

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// costs: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute arc55_addTransaction(pay,uint64,uint8,byte[])void
	callsub arc55_addTransaction
	int 1
	return

// arc55_addTransaction(costs: PayTxn, transactionGroup: uint64, index: uint8, transaction: bytes): void
//
// Add a transaction to an existing group. Only one transaction should be included per call
// @param costs Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (9 + transaction.length))
// @param transactionGroup Transaction Group nonce
// @param index Transaction position within atomic group to add
// @param transaction Transaction to add
arc55_addTransaction:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// if5_condition
	// src/arcs/arc55.algo.ts:325
	// !this.isAdmin()
	callsub isAdmin
	!
	bz if5_end

	// if5_consequent
	// src/arcs/arc55.algo.ts:326
	// this.onlySigner()
	callsub onlySigner

if5_end:
	// src/arcs/arc55.algo.ts:329
	// assert(transactionGroup)
	frame_dig -2 // transactionGroup: uint64
	assert

	// src/arcs/arc55.algo.ts:330
	// assert(transactionGroup <= this.arc55_nonce.value)
	frame_dig -2 // transactionGroup: uint64
	byte 0x61726335355f6e6f6e6365 // "arc55_nonce"
	app_global_get
	<=
	assert

	// src/arcs/arc55.algo.ts:332
	// transactionBox: TransactionGroup = {
	//             nonce: transactionGroup,
	//             index: index,
	//         }
	frame_dig -2 // transactionGroup: uint64
	itob
	frame_dig -3 // index: uint8
	itob
	extract 7 1
	concat
	frame_bury 0 // transactionBox: TransactionGroup

	// src/arcs/arc55.algo.ts:339
	// transactionData = transaction
	frame_dig -4 // transaction: bytes
	frame_bury 1 // transactionData: byte[]

	// src/arcs/arc55.algo.ts:340
	// groupPosition = this.txn.groupIndex + 1
	txn GroupIndex
	int 1
	+
	frame_bury 2 // groupPosition: uint64

	// if6_condition
	// src/arcs/arc55.algo.ts:341
	// groupPosition < globals.groupSize
	frame_dig 2 // groupPosition: uint64
	global GroupSize
	<
	bz if6_end

// if6_consequent
do_while_0_statement:
	// if7_condition
	// src/arcs/arc55.algo.ts:344
	// this.txnGroup[groupPosition].applicationID === this.txn.applicationID
	//                     && this.txnGroup[groupPosition].applicationArgs[0] === method("arc55_addTransactionContinued(byte[])void")
	frame_dig 2 // groupPosition: uint64
	gtxns ApplicationID
	txn ApplicationID
	==
	dup
	bz skip_and0
	frame_dig 2 // groupPosition: uint64
	gtxns ApplicationArgs 0
	method "arc55_addTransactionContinued(byte[])void"
	==
	&&

skip_and0:
	bz if7_end

	// if7_consequent
	// src/arcs/arc55.algo.ts:347
	// transactionData += extract3(this.txnGroup[groupPosition].applicationArgs[1], 2, 0)
	frame_dig 1 // transactionData: byte[]
	frame_dig 2 // groupPosition: uint64
	gtxns ApplicationArgs 1
	extract 2 0
	concat
	frame_bury 1 // transactionData: byte[]

if7_end:
	// src/arcs/arc55.algo.ts:349
	// groupPosition += 1
	frame_dig 2 // groupPosition: uint64
	int 1
	+
	frame_bury 2 // groupPosition: uint64

do_while_0:
	// src/arcs/arc55.algo.ts:350
	// groupPosition < globals.groupSize
	frame_dig 2 // groupPosition: uint64
	global GroupSize
	<
	bnz do_while_0_statement

do_while_0_end:

if6_end:
	// src/arcs/arc55.algo.ts:353
	// mbrTxnIncrease = this.arc55_mbrTxnIncrease(transactionData.length)
	frame_dig 1 // transactionData: byte[]
	len
	callsub arc55_mbrTxnIncrease
	frame_bury 3 // mbrTxnIncrease: uint64

	// src/arcs/arc55.algo.ts:355
	// verifyPayTxn(costs, {
	//             receiver: this.app.address,
	//             amount: { greaterThanEqualTo: mbrTxnIncrease }
	//         })
	// verify receiver
	frame_dig -1 // costs: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // costs: PayTxn
	gtxns Amount
	frame_dig 3 // mbrTxnIncrease: uint64
	>=
	assert

	// src/arcs/arc55.algo.ts:361
	// this.arc55_transactions(transactionBox).value = transactionData
	frame_dig 0 // transactionBox: TransactionGroup
	dup
	box_del
	pop
	frame_dig 1 // transactionData: byte[]
	box_put

	// src/arcs/arc55.algo.ts:364
	// this.TransactionAdded.log({
	//             transactionGroup: transactionGroup,
	//             transactionIndex: index
	//         })
	byte 0x1849a594 // TransactionAdded(uint64,uint8)
	frame_dig -2 // transactionGroup: uint64
	itob
	frame_dig -3 // index: uint8
	itob
	extract 7 1
	concat
	concat
	log
	retsub

// arc55_addTransactionContinued(byte[])void
abi_route_arc55_addTransactionContinued:
	// transaction: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc55_addTransactionContinued(byte[])void
	callsub arc55_addTransactionContinued
	int 1
	return

// arc55_addTransactionContinued(transaction: bytes): void
arc55_addTransactionContinued:
	proto 1 0

	// if8_condition
	// src/arcs/arc55.algo.ts:373
	// !this.isAdmin()
	callsub isAdmin
	!
	bz if8_end

	// if8_consequent
	// src/arcs/arc55.algo.ts:374
	// this.onlySigner()
	callsub onlySigner

if8_end:
	retsub

// arc55_removeTransaction(uint64,uint8)void
abi_route_arc55_removeTransaction:
	// index: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	btoi

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_removeTransaction(uint64,uint8)void
	callsub arc55_removeTransaction
	int 1
	return

// arc55_removeTransaction(transactionGroup: uint64, index: uint8): void
//
// Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.
// @param transactionGroup Transaction Group nonce
// @param index Transaction position within atomic group to remove
arc55_removeTransaction:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// if9_condition
	// src/arcs/arc55.algo.ts:387
	// !this.isAdmin()
	callsub isAdmin
	!
	bz if9_end

	// if9_consequent
	// src/arcs/arc55.algo.ts:388
	// this.onlySigner()
	callsub onlySigner

if9_end:
	// src/arcs/arc55.algo.ts:391
	// transactionBox: TransactionGroup = {
	//             nonce: transactionGroup,
	//             index: index,
	//         }
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // index: uint8
	itob
	extract 7 1
	concat
	frame_bury 0 // transactionBox: TransactionGroup

	// src/arcs/arc55.algo.ts:396
	// txnLength = this.arc55_transactions(transactionBox).size
	frame_dig 0 // transactionBox: TransactionGroup
	box_len
	assert
	frame_bury 1 // txnLength: uint64

	// src/arcs/arc55.algo.ts:397
	// this.arc55_transactions(transactionBox).delete
	frame_dig 0 // transactionBox: TransactionGroup
	box_del

	// src/arcs/arc55.algo.ts:402
	// mbrTxnDecrease = (2500) + (400 * (9 + txnLength))
	int 2500
	int 400
	int 9
	frame_dig 1 // txnLength: uint64
	+
	*
	+
	frame_bury 2 // mbrTxnDecrease: uint64

	// src/arcs/arc55.algo.ts:404
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: mbrTxnDecrease
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/arcs/arc55.algo.ts:405
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/arcs/arc55.algo.ts:406
	// amount: mbrTxnDecrease
	frame_dig 2 // mbrTxnDecrease: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/arcs/arc55.algo.ts:410
	// this.TransactionRemoved.log({
	//             transactionGroup: transactionGroup,
	//             transactionIndex: index
	//         })
	byte 0x3e9b2ca5 // TransactionRemoved(uint64,uint8)
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // index: uint8
	itob
	extract 7 1
	concat
	concat
	log
	retsub

// arc55_setSignatures(pay,uint64,byte[64][])void
abi_route_arc55_setSignatures:
	// signatures: byte[64][]
	txna ApplicationArgs 2
	extract 2 0

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// costs: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute arc55_setSignatures(pay,uint64,byte[64][])void
	callsub arc55_setSignatures
	int 1
	return

// arc55_setSignatures(costs: PayTxn, transactionGroup: uint64, signatures: bytes64[]): void
//
// Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays
// @param costs Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (40 + signatures.length))
// @param transactionGroup Transaction Group nonce
// @param signatures Array of signatures
arc55_setSignatures:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/arcs/arc55.algo.ts:427
	// this.onlySigner()
	callsub onlySigner

	// src/arcs/arc55.algo.ts:429
	// mbrSigIncrease = this.arc55_mbrSigIncrease(signatures.length * 64)
	frame_dig -3 // signatures: bytes64[]
	len
	int 64
	/
	int 64
	*
	callsub arc55_mbrSigIncrease
	frame_bury 0 // mbrSigIncrease: uint64

	// src/arcs/arc55.algo.ts:431
	// verifyPayTxn(costs, {
	//             receiver: this.app.address,
	//             amount: { greaterThanEqualTo: mbrSigIncrease }
	//         })
	// verify receiver
	frame_dig -1 // costs: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // costs: PayTxn
	gtxns Amount
	frame_dig 0 // mbrSigIncrease: uint64
	>=
	assert

	// src/arcs/arc55.algo.ts:436
	// signatureBox: TransactionSignatures = {
	//             nonce: transactionGroup,
	//             address: this.txn.sender
	//         }
	frame_dig -2 // transactionGroup: uint64
	itob
	txn Sender
	concat
	frame_bury 1 // signatureBox: TransactionSignatures

	// src/arcs/arc55.algo.ts:441
	// this.arc55_signatures(signatureBox).value = signatures
	frame_dig 1 // signatureBox: TransactionSignatures
	dup
	box_del
	pop
	frame_dig -3 // signatures: bytes64[]
	dup
	len
	int 64
	/
	itob
	extract 6 2
	swap
	concat
	box_put

	// src/arcs/arc55.algo.ts:444
	// this.SignatureSet.log({
	//             transactionGroup: transactionGroup,
	//             signer: this.txn.sender
	//         })
	byte 0xecfbcb33 // SignatureSet(uint64,address)
	frame_dig -2 // transactionGroup: uint64
	itob
	txn Sender
	concat
	concat
	log
	retsub

// arc55_clearSignatures(uint64,address)void
abi_route_arc55_clearSignatures:
	// address: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// transactionGroup: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc55_clearSignatures(uint64,address)void
	callsub arc55_clearSignatures
	int 1
	return

// arc55_clearSignatures(transactionGroup: uint64, address: Address): void
//
// Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature
// @param transactionGroup Transaction Group nonce
// @param address Address whose signatures to clear
arc55_clearSignatures:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// if10_condition
	// src/arcs/arc55.algo.ts:459
	// !this.isAdmin()
	callsub isAdmin
	!
	bz if10_end

	// if10_consequent
	// src/arcs/arc55.algo.ts:460
	// this.onlySigner()
	callsub onlySigner

if10_end:
	// src/arcs/arc55.algo.ts:463
	// signatureBox: TransactionSignatures = {
	//             nonce: transactionGroup,
	//             address: address
	//         }
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // address: Address
	concat
	frame_bury 0 // signatureBox: TransactionSignatures

	// src/arcs/arc55.algo.ts:468
	// sigLength = this.arc55_signatures(signatureBox).size
	frame_dig 0 // signatureBox: TransactionSignatures
	box_len
	assert
	frame_bury 1 // sigLength: uint64

	// src/arcs/arc55.algo.ts:469
	// this.arc55_signatures(signatureBox).delete
	frame_dig 0 // signatureBox: TransactionSignatures
	box_del

	// src/arcs/arc55.algo.ts:474
	// mbrSigDecrease = (2500) + (400 * (40 + sigLength))
	int 2500
	int 400
	int 40
	frame_dig 1 // sigLength: uint64
	+
	*
	+
	frame_bury 2 // mbrSigDecrease: uint64

	// src/arcs/arc55.algo.ts:476
	// sendPayment({
	//             receiver: address,
	//             amount: mbrSigDecrease
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/arcs/arc55.algo.ts:477
	// receiver: address
	frame_dig -2 // address: Address
	itxn_field Receiver

	// src/arcs/arc55.algo.ts:478
	// amount: mbrSigDecrease
	frame_dig 2 // mbrSigDecrease: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/arcs/arc55.algo.ts:482
	// this.SignatureSet.log({
	//             transactionGroup: transactionGroup,
	//             signer: address
	//         })
	byte 0xecfbcb33 // SignatureSet(uint64,address)
	frame_dig -1 // transactionGroup: uint64
	itob
	frame_dig -2 // address: Address
	concat
	concat
	log
	retsub

// deploy(address)uint64
abi_route_deploy:
	// The ABI return prefix
	byte 0x151f7c75

	// admin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute deploy(address)uint64
	callsub deploy
	itob
	concat
	log
	int 1
	return

// deploy(admin: Address): Application
//
// Deploy a new On-Chain Msig App.
// @param admin Address of person responsible for calling `arc55_setup`
// @returns Msig App Application ID
deploy:
	proto 1 1

	// if11_condition
	// src/msig-app.algo.ts:13
	// admin != globals.zeroAddress
	frame_dig -1 // admin: Address
	global ZeroAddress
	!=
	bz if11_else

	// if11_consequent
	// src/msig-app.algo.ts:14
	// this.arc55_setAdmin(admin)
	frame_dig -1 // admin: Address
	callsub arc55_setAdmin
	b if11_end

if11_else:
	// src/msig-app.algo.ts:16
	// this.arc55_setAdmin(this.txn.sender)
	txn Sender
	callsub arc55_setAdmin

if11_end:
	// src/msig-app.algo.ts:19
	// return globals.currentApplicationID;
	global CurrentApplicationID
	retsub

// update()void
abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
//
// Update the application
update:
	proto 0 0

	// src/msig-app.algo.ts:27
	// this.onlyAdmin()
	callsub onlyAdmin
	retsub

// destroy()void
abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
//
// Destroy the application and return funds to creator address. All transactions must be removed before calling destroy
destroy:
	proto 0 0

	// src/msig-app.algo.ts:35
	// this.onlyAdmin()
	callsub onlyAdmin

	// src/msig-app.algo.ts:37
	// sendPayment({
	//             amount: 0,
	//             receiver: globals.creatorAddress,
	//             closeRemainderTo: globals.creatorAddress,
	//             fee: 0,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/msig-app.algo.ts:38
	// amount: 0
	int 0
	itxn_field Amount

	// src/msig-app.algo.ts:39
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// src/msig-app.algo.ts:40
	// closeRemainderTo: globals.creatorAddress
	global CreatorAddress
	itxn_field CloseRemainderTo

	// src/msig-app.algo.ts:41
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "deploy(address)uint64"
	txna ApplicationArgs 0
	match abi_route_deploy
	err

call_NoOp:
	method "arc55_getThreshold()uint64"
	method "arc55_getAdmin()address"
	method "arc55_nextTransactionGroup()uint64"
	method "arc55_getTransaction(uint64,uint8)byte[]"
	method "arc55_getSignatures(uint64,address)byte[64][]"
	method "arc55_getSignerByIndex(uint64)address"
	method "arc55_isSigner(address)bool"
	method "arc55_mbrSigIncrease(uint64)uint64"
	method "arc55_mbrTxnIncrease(uint64)uint64"
	method "arc55_setup(uint8,address[])void"
	method "arc55_newTransactionGroup()uint64"
	method "arc55_addTransaction(pay,uint64,uint8,byte[])void"
	method "arc55_addTransactionContinued(byte[])void"
	method "arc55_removeTransaction(uint64,uint8)void"
	method "arc55_setSignatures(pay,uint64,byte[64][])void"
	method "arc55_clearSignatures(uint64,address)void"
	txna ApplicationArgs 0
	match abi_route_arc55_getThreshold abi_route_arc55_getAdmin abi_route_arc55_nextTransactionGroup abi_route_arc55_getTransaction abi_route_arc55_getSignatures abi_route_arc55_getSignerByIndex abi_route_arc55_isSigner abi_route_arc55_mbrSigIncrease abi_route_arc55_mbrTxnIncrease abi_route_arc55_setup abi_route_arc55_newTransactionGroup abi_route_arc55_addTransaction abi_route_arc55_addTransactionContinued abi_route_arc55_removeTransaction abi_route_arc55_setSignatures abi_route_arc55_clearSignatures
	err

call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match abi_route_update
	err

call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match abi_route_destroy
	err